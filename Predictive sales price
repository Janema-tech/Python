# Continue to the car sales dataset to forecast 

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR
from xgboost import XGBRegressor  # Importaci贸n para XGBoost
from catboost import CatBoostRegressor  # Importaci贸n para CatBoost
from lightgbm import LGBMRegressor  # Importaci贸n para LightGBM
from sklearn.neural_network import MLPRegressor  # Importaci贸n para MLPRegressor
from sklearn.metrics import mean_absolute_error, r2_score

df = pd.read_csv('/github/Janema-tech/car-sales-report/Car Sales.xlsx - car_data.csv')
models = [
    ('Linear Regression', LinearRegression()),
    ('Ridge Regression', Ridge()),
    ('Lasso Regression', Lasso()),
    ('Decision Tree Regressor', DecisionTreeRegressor()),
    ('Random Forest Regressor', RandomForestRegressor()),
    ('Gradient Boosting Regressor', GradientBoostingRegressor()),
    ('SVR', SVR()),
    ('XGBoost Regressor', XGBRegressor()),  # Nuevo modelo XGBoost
    ('CatBoost Regressor', CatBoostRegressor(verbose=False)),  # Nuevo modelo CatBoost
    ('LightGBM Regressor', LGBMRegressor()),  # Nuevo modelo LightGBM
    ('MLP Regressor', MLPRegressor())  # Nuevo modelo MLPRegressor
]

label_encoder = LabelEncoder()
categorical_cols = ['Gender', 'Company', 'Model', 'Engine', 'Transmission', 'Color', 'Body Style', 'Dealer_Region']
for col in categorical_cols:
    df[col] = label_encoder.fit_transform(df[col])

X = df[['Gender', 'Model', 'Engine', 'Transmission', 'Company', 'Color', 'Body Style', 'Dealer_Region']]

pca = PCA(n_components=3) 
X_pca = pca.fit_transform(X)
y = df['Price']

X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)

for model_name, model in models:
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print(f'Model: {model_name}')
    print(f'Mean Absolute Error (MAE): {mae}')
    print(f'R-squared (R^2): {r2}')
    print('-' * 40)









